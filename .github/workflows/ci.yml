# .github/workflows/go-ci.yml
name: Go CI

on:
  push:
    branches: [main]
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      # "postgres" という名前でサービスコンテナを定義
      postgres:
        # Docker Hubの公式PostgreSQLイメージを使用
        image: postgres:13-alpine
        # サービスコンテナ（PostgreSQL自体）の初期化用環境変数
        env:
          POSTGRES_USER: 'postgres'
          POSTGRES_PASSWORD: 'password'
          POSTGRES_DB: 'fleamarket'
        # DBが起動して接続可能になるまで待つためのヘルスチェック
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # コンテナの5432ポートをホスト（実行環境）の5432ポートにマッピング
          - 5432:5432

    env:
      ENV: 'test' # CI環境なので "prod" ではなく "test" に変更
      DB_HOST: localhost # サービスコンテナは localhost で接続できる
      DB_PORT: 5432 # 上記の ports でマッピングしたポート
      DB_USER: 'postgres'
      DB_PASSWORD: 'password'
      DB_NAME: 'fleamarket'
      SECRET_KEY: '47ed8f16a737a02a43b5211703e6452288961a15b4bebe5683ac862176df515b'

    steps:
      # ------------- ソース取得 -------------
      - name: 🛎️  Checkout code
        uses: actions/checkout@v4

      # ------------- Install cli tools -------------
      - name: 📥  Install gotestsum
        run: |
          go install gotest.tools/gotestsum@latest

      - name: 📥  Install golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.57.2
          install-only: true

      # ------------- Go セットアップ -------------
      - name: 🔧  Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      # ------------- キャッシュ -------------
      - name: 🗄️  Cache go-build
        uses: actions/cache@v4
        with:
          path: ~/.cache/go-build
          key: go-build-${{ runner.os }}-${{ hashFiles('**/*.go') }}
          restore-keys: |
            go-build-${{ runner.os }}-

      - name: 🗄️  Cache go mod
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: go-mod-${{ runner.os }}-${{ hashFiles('**/go.mod', '**/go.sum') }}
          restore-keys: |
            go-mod-${{ runner.os }}-

      # ------------- 依存ライブラリ -------------
      - name: 📦  Install dependencies
        run: go mod download

      # ------------- テスト -------------
      - name: ✅  Run tests (make test)
        id: test
        run: make test 2>&1 | tee test.log
        continue-on-error: true

      # ------------- Lint -------------
      - name: 🔍  Run lint (make lint)
        id: lint
        run: make lint 2>&1 | tee lint.log
        continue-on-error: true

      # ------------- ログ整理（失敗時のみ）-------------
      - name: 📄  Collect error logs
        id: logs
        if: steps.test.outcome == 'failure' || steps.lint.outcome == 'failure'
        run: |
          {
            echo "---- test.log (tail 50) ----"
            tail -n 50 test.log 2>/dev/null || true
            echo
            echo "---- lint.log (tail 50) ----"
            tail -n 50 lint.log 2>/dev/null || true
          } > slack_body.txt
          # GITHUB_OUTPUT へ渡す
          echo "body<<EOF" >> $GITHUB_OUTPUT
          cat slack_body.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # ------------- Slack 通知 -------------
      - name: 📣  Notify Slack
        # always() にしないと成功時に実行されない
        if: always()
        uses: slackapi/slack-github-action@v1.24.0
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_URL }}
        with:
          # ペイロードを外部ファイルから読み込む
          payload-file-path: '.github/slack/payload.json'

      # ------------- 最終的な終了ステータス -------------
      - name: ❌  Fail job if any step failed
        if: steps.test.outcome == 'failure' || steps.lint.outcome == 'failure'
        run: exit 1
