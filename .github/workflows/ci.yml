name: Go CI

on:
  push:
    branches: [main]
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13-alpine
        env:
          POSTGRES_USER: 'postgres'
          POSTGRES_PASSWORD: 'password'
          POSTGRES_DB: 'fleamarket'
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      ENV: 'test'
      DB_HOST: localhost
      DB_PORT: 5432
      DB_USER: 'postgres'
      DB_PASSWORD: 'password'
      DB_NAME: 'fleamarket'
      SECRET_KEY: '47ed8f16a737a02a43b5211703e6452288961a15b4bebe5683ac862176df515b'

    steps:
      - name: 🛎️ Checkout code
        uses: actions/checkout@v4

      - name: 📥 Install gotestsum
        run: go install gotest.tools/gotestsum@latest

      - name: Install and run golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: v2.1

      - name: 🔧 Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - name: 🗄️ Cache go-build
        uses: actions/cache@v4
        with:
          path: ~/.cache/go-build
          key: go-build-${{ runner.os }}-${{ hashFiles('**/*.go') }}
          restore-keys: |
            go-build-${{ runner.os }}-

      - name: 🗄️ Cache go mod
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: go-mod-${{ runner.os }}-${{ hashFiles('**/go.mod', '**/go.sum') }}
          restore-keys: |
            go-mod-${{ runner.os }}-

      - name: 📦 Install dependencies
        run: go mod download

      - name: ✅ Run tests (make test)
        id: test
        run: make test 2>&1 | tee test.log
        continue-on-error: true

      - name: 🔍 Run lint (make lint)
        id: lint
        run: make lint 2>&1 | tee lint.log
        continue-on-error: true

      - name: 📄 Collect error logs
        id: logs
        if: steps.test.outcome == 'failure' || steps.lint.outcome == 'failure'
        run: |
          {
            echo "---- test.log (tail 50) ----"
            tail -n 50 test.log 2>/dev/null || true
            echo
            echo "---- lint.log (tail 50) ----"
            tail -n 50 lint.log 2>/dev/null || true
          } > slack_body.txt
          # GITHUB_OUTPUT へ渡す
          echo "body<<EOF" >> $GITHUB_OUTPUT
          cat slack_body.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # ------------- Slack用の変数をセット -------------
      - name: Set Slack notification env vars
        run: |
          # Slack通知用変数セット
          if [[ "${{ steps.test.outcome }}" == "failure" || "${{ steps.lint.outcome }}" == "failure" ]]; then
            echo 'RESULT_ICON=:x:' >> $GITHUB_ENV
            echo 'LOG_BLOCK=,{"type": "section","text": {"type": "mrkdwn","text": "```${LOG_BODY}```"}}' >> $GITHUB_ENV
            echo "LOG_BODY=${{ steps.logs.outputs.body }}" >> $GITHUB_ENV
          else
            echo 'RESULT_ICON=:white_check_mark:' >> $GITHUB_ENV
            echo 'LOG_BLOCK=' >> $GITHUB_ENV
            echo 'LOG_BODY=' >> $GITHUB_ENV
          fi
          echo "REPOSITORY=${{ github.repository }}" >> $GITHUB_ENV
          echo "SERVER_URL=${{ github.server_url }}" >> $GITHUB_ENV
          echo "RUN_ID=${{ github.run_id }}" >> $GITHUB_ENV
          echo "RUN_NUMBER=${{ github.run_number }}" >> $GITHUB_ENV
          echo "REF_NAME=${{ github.ref_name }}" >> $GITHUB_ENV
          echo "TEST_OUTCOME=${{ steps.test.outcome }}" >> $GITHUB_ENV
          echo "LINT_OUTCOME=${{ steps.lint.outcome }}" >> $GITHUB_ENV

      # ------------- payload.jsonを生成 -------------
      - name: Generate Slack payload.json
        run: |
          sudo apt-get update && sudo apt-get install -y gettext-base
          envsubst < .github/slack/payload.tmpl.json > .github/slack/payload.json

      - name: 📣 Notify Slack
        if: always()
        uses: slackapi/slack-github-action@v1.24.0
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_URL }}
        with:
          payload-file-path: '.github/slack/payload.json'

      - name: ❌ Fail job if any step failed
        if: steps.test.outcome == 'failure' || steps.lint.outcome == 'failure'
        run: exit 1
