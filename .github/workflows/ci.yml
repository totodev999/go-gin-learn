name: Go CI

on:
  push:
    branches: [main]
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13-alpine
        env:
          POSTGRES_USER: 'postgres'
          POSTGRES_PASSWORD: 'password'
          POSTGRES_DB: 'fleamarket'
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      ENV: 'test'
      DB_HOST: localhost
      DB_PORT: 5432
      DB_USER: 'postgres'
      DB_PASSWORD: 'password'
      DB_NAME: 'fleamarket'
      SECRET_KEY: '47ed8f16a737a02a43b5211703e6452288961a15b4bebe5683ac862176df515b'
      BASE_URL: 'https://jsonplaceholder.typicode.com'

    steps:
      - name: üõéÔ∏è Checkout code
        uses: actions/checkout@v4

      - name: üîß Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - name: üì• Install gotestsum
        run: go install gotest.tools/gotestsum@v1.12.3

      - name: Install and run golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: v2.1

      - name: üóÑÔ∏è Cache go-build
        uses: actions/cache@v4
        with:
          path: ~/.cache/go-build
          key: go-build-${{ runner.os }}-${{ hashFiles('**/*.go') }}
          restore-keys: |
            go-build-${{ runner.os }}-

      - name: üóÑÔ∏è Cache go mod
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: go-mod-${{ runner.os }}-${{ hashFiles('**/go.mod', '**/go.sum') }}
          restore-keys: |
            go-mod-${{ runner.os }}-

      - name: üì¶ Install dependencies
        run: go mod download

      - name: ‚úÖ Run tests (make test)
        id: test
        run: make test 2>&1 | tee test.log
        continue-on-error: true

      - name: üîç Run lint (make lint)
        id: lint
        run: make lint 2>&1 | tee lint.log
        continue-on-error: true

      # ------------- SlackÁî®„ÅÆÂ§âÊï∞„Çí„Çª„ÉÉ„Éà -------------
      - name: Set Slack notification env vars
        run: |
          if [[ "${{ steps.test.outcome }}" == "failure" || "${{ steps.lint.outcome }}" == "failure" ]]; then
            echo 'RESULT_ICON=:x:' >> $GITHUB_ENV
          else
            echo 'RESULT_ICON=:white_check_mark:' >> $GITHUB_ENV
          fi

      - name: Notify Slack
        if: always()
        uses: slackapi/slack-github-action@v2.1.1
        with:
          method: chat.postMessage
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          payload: |
            channel: ${{ secrets.SLACK_CHANNEL_ID }}
            text: "${{ github.repository }} CI ${{ env.RESULT_ICON }} \n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Run>"
            blocks:
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: "GitHub Action build result: ${{ env.RESULT_ICON }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"

      - name: ‚ùå Fail job if any step failed
        if: steps.test.outcome == 'failure' || steps.lint.outcome == 'failure'
        run: exit 1
